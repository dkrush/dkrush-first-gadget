<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="CA_ped"> 
  <Require feature="opensocial-0.8" />
  <Require feature="minimessage"/>
  </ModulePrefs>
  <Content type="html" view="home">
    <![CDATA[
	
	<STYLE type="text/css">
		INPUT.myinp  {text-align: left; width: 600px}
		INPUT.myint  {text-align: right; width: 50px}
		INPUT.myreal {text-align: left; width: 50px}
		INPUT.mybut  {width: 25px; height: 25px}   
		div.sett 	{background-color:rgb(220,220,220); padding-left:20px;}
		div.info 	{background-color:rgb(220,225,220); padding-left:20px;}
	</STYLE>
	<SCRIPT type="text/javascript" src="//dkrush-first-gadget.googlecode.com/svn/trunk/matrix.js"></SCRIPT> 
	<SCRIPT type="text/javascript"> 
	<!--
	var myTimer,dt=300;
	var N,M;
	var dat=new Array,perm=new Array,adat=new Array;//data
	var chars=[".","#","?","L","?","?","?","R"];
	var fl_upd;//update output
	var out_mode;//output mode; 0-text, 1-graph
	var p_imp,p_fol,t_imp;
	function sign(x)
	{
		if(x>=0){return 1;}
		return -1;
	}
	function pos(x)
	{
		if(x>=0){return x;} return 0;
	}
	function neg(x)
	{
		if(x<0){return Math.abs(x);} return 0;
	}
	function rand()
	{
		return Math.round(Math.random()*0xffff);
	}
	function sleep(millis, callback) {
		setTimeout(function(){ callback(); }, millis);
	}
	function Init()
	{var i;
		N=300;
		M=Math.floor(N/2);
		t_imp=3;
		p_imp=25;
		p_fol=5;
		toMatrix(dat,N,M);
		toMatrix(adat,N,M);
		/*for(var i=0;i<dat.size;i++){dat[i]=i;}
		alert(dat.toString());
		var str=dat.at(0,0)+","+dat.at(1,0)+","+dat.at(2,0)+"\n"+dat.at(0,1)+","+dat.at(1,1)+","+dat.at(2,1);
		alert(str);*/
		for(i=0;i<dat.size;i++){
			//if(i%N>5*N/12 && i%N<7*N/12 && i/N>M/3 && i/N<2*M/3){dat[i]=1;}else{dat[i]=0;}
			//if((i/N)>5 && (i/N)<M-5 && i%N>5 && i%N<N-5){dat[i]=Math.round(Math.random());}else{dat[i]=0;}
			dat[i]=0;adat[i]=0;
			if(Math.random()<0.2){
				if(Math.random()<0.5){dat[i]=7;}else{dat[i]=3;}
			}
		}
		//dat[310]=3;
		for(i=0;i<N;i++){
			dat[i]=1;
			dat[N*M-N+i]=1;
		}
		for(i=0;i<dat.size;i++){
			//j=i%N;
			//if(dat[i]!=1 /*&& j>=1 && j+1<N*/){perm.push(i);}
			if(dat[i]==3 || dat[i]==7){perm.push(i);}
		}
		document.getElementById("paintdiv0").style.font=(640/N)+"px/72% 'Courier New','Courier',monospace";
		document.getElementById("ed_res").value=N;
		document.getElementById("rb_0").checked=true;
		document.getElementById("ed_den").value=0.2;
		document.getElementById("ed_frr").value=0.5;
		document.getElementById("ed_wf").value=p_fol;
		document.getElementById("ed_wi").value=p_imp;
		document.getElementById("ed_ti").value=t_imp;
		out_mode=0;
		fl_upd=true;
		OnPaint();
	}
	function Reset(w)
	{var n=parseInt(w);
		if(n==NaN){return;}
		if(n>5 && n<=2000){
			N=n;
			M=Math.floor(N/2);
			//dat.reset(N,M);
			//adat.reset(N,M);
			toMatrix(dat,N,M);
			toMatrix(adat,N,M);
			for(i=0;i<dat.size;i++){
				dat[i]=0;adat[i]=0;
			}
			for(i=0;i<N;i++){
				dat[i]=1;
				dat[N*M-N+i]=1;
			}
			perm.length=0;
			document.getElementById("paintdiv0").style.font=(640/N)+"px/72% 'Courier New','Courier',monospace";
			document.getElementById("ed_res").value=N;
		}
	}
  function OnInit()
	{
        alert("OnInit");
        //msg.createDismissibleMessage("Please close me when you're done reading me.");
      Init();//Step();
	}
	function OnStartButton()
	{//alert("OnButton()");
		if(document.getElementById("startbtn").value=="start"){
			p_fol=parseInt(document.getElementById("ed_wf").value);if(p_fol==NaN || p_fol<0){p_fol=0;document.getElementById("ed_wf").value=p_fol;}
			p_imp=parseInt(document.getElementById("ed_wi").value);if(p_imp==NaN || p_imp<0){p_imp=0;document.getElementById("ed_wi").value=p_imp;}
			t_imp=parseInt(document.getElementById("ed_ti").value);if(t_imp==NaN || t_imp<0){t_imp=0;document.getElementById("ed_ti").value=t_imp;}
			document.getElementById("startbtn").value="stop";
			myTimer=setInterval("Step()",dt);
		}else{
			document.getElementById("startbtn").value="start";
			clearInterval(myTimer);
		}
	}
	function OnRestartButton()
	{//alert("OnRestartButton()");
		Init();
		//traj_body=(W/2+x*R)+" "+(H/2-vx*R)+" ";
		//sign_body="0 "+(H/2-x*R)+" ";
		OnPaint();
	}
	function OnSettingsButton()
	{//msg.createDismissibleMessage("OnSettingsButton");
		if(document.getElementById("settbtn").value=="settings >"){
			document.getElementById("settbtn").value="settings <";
			document.getElementById("settdiv").style.display='block';
		}else{
			document.getElementById("settbtn").value="settings >";
			document.getElementById("settdiv").style.display='none';
		}
	}
	function OnInfoButton()
	{
		if(document.getElementById("infobtn").value=="info >"){
			document.getElementById("infobtn").value="info <";
			document.getElementById("infodiv").style.display='block';
		}else{
			document.getElementById("infobtn").value="info >";
			document.getElementById("infodiv").style.display='none';
		}
	}
	function OnPaint()
	{var i,j,offs,a,b,x,y,str="",str1="";
		if(fl_upd){
			if(out_mode<1){
				for(i=0;i<dat.size;i++){
					if(i && !(i%N)){str+="\n";/*str1+="<br/>";*/}
					j=dat[i];if(j>7 || j<0){j=2;}
					str+=chars[j];//str1+=adat[i]+" ";
				}
				document.getElementById("paintdiv0").innerHTML=str;
				//document.getElementById("echo").innerHTML=str1;//(1%1)+" "+(10%1);
			}else{
				var svg, pth;
				svg="<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='300px' height='"+(300*M/N)+"px' viewBox='-0.5 -0.5 "+N+".5 "+M+".5'>\n";
				svg+="<defs>\n"
				svg+="<g id='lll' fill='blue'><polygon points='-0.5,0 0.5,0.5 0.5,-0.5'/></g>\n";
				svg+="<g id='rrr' fill='red'><polygon points='0.5,0 -0.5,0.5 -0.5,-0.5'/></g>\n";
				svg+="<g id='ooo' fill='grey'><polygon points='-0.5,-0.5 -0.5,0.5 0.5,0.5 0.5,-0.5'/></g>\n";
				svg+="</defs>\n";
				pth="";offs=0;
				for(j=0;j<M;j++){
					for(i=0;i<N;i++){
						a=dat[offs];offs++;
						if(a==3){pth+="<use transform='translate("+i+","+j+")' xlink:href='#lll'/>\n";continue;}
						if(a==7){pth+="<use transform='translate("+i+","+j+")' xlink:href='#rrr'/>\n";continue;}
						if(a==1){pth+="<use transform='translate("+i+","+j+")' xlink:href='#ooo'/>\n";continue;}
					}
				}
				if(pth.length>5){svg+="<g stroke='none'>\n"+pth+"</g>\n";}
				svg+="</svg>";
				document.getElementById("paintdiv0").innerHTML=svg;
			}
			fl_upd=false;
		}
	}
	function fold_x(i)
	{
		if(i%N<1){i+=N-2;}else{if(i%N>=N-1){i-=N-2;}}
		return i;
	}
	function fold_y(i)
	{
		if(i<N){i=dat.size-2*N+i;}else{if(i>=dat.size-N){i=i%N+N;}}
		return i;
	}
	function left(i)
	{
		return ((Math.floor(i/N)*N)+((i%N)+N-1)%N);
	}
	function right(i)
	{
		return ((Math.floor(i/N)*N)+((i%N)+1)%N);
	}
	function _step1()
	{var i,j,k;
	 var prob=new Array();
		//update perm
		i=perm.length;
		while(i){
			i--;
			k=rand()%perm.length;
			j=perm[k];perm[k]=perm[i];perm[i]=j;
		}
		//
		k=perm.length;
		while(k){
			k--;
			i=perm[k];
			if(dat[i]!=3 && dat[i]!=7){continue;}
			//adat[i]=Math.floor(pos(adat[i])/2)-Math.floor(neg(adat[i])/2);//
			adat[i]=0;
			prob=[0,0,0,0];
			j=right(i);
			if(dat[j]==3){adat[i]-=neg(adat[j]-1);}
			if(dat[j]==7){adat[i]-=neg(adat[j]+1);}
			j=left(i);
			if(dat[j]==3){adat[i]+=pos(adat[j]-1);}
			if(dat[j]==7){adat[i]+=pos(adat[j]+1);}
			//if(dat[j]==0){prob[2]+=p_fol;}
			
			if(dat[j]==0){prob[2]+=neg(adat[i]);if(dat[i]==3){prob[2]+=p_fol;}}
			j=right(i);
			//if(dat[j]==0){prob[0]+=p_fol;}
			if(dat[j]==0){prob[0]+=pos(adat[i]);if(dat[i]==7){prob[0]+=p_fol;}}
			
			/*if(prob[0]+prob[2]<3 && Math.random()<0.25){
				if(dat[i+N]==0){prob[1]+=p_imp;}
				if(dat[i-N]==0){prob[3]+=p_imp;}
			}*/
			if(prob[0]+prob[2]<t_imp && Math.random()<0.01*p_imp){
				if(dat[i+N]==0){prob[1]+=1;}
				if(dat[i-N]==0){prob[3]+=1;}
			}
			/*if(dat[i]==3){//left mover
				if(dat[left(i)]==0){prob[2]+=p_fol;}
			}else{//right mover
				if(dat[right(i)]==0){prob[0]+=p_fol;}
			}*/
			prob[1]+=prob[0];prob[2]+=prob[1];prob[3]+=prob[2];
			if(prob[3]<1){continue;}
			j=rand()%prob[3];
			if(j<prob[0]){
			 j=right(i);dat[j]=dat[i];dat[i]=0;adat[i]=0;perm[k]=j;
			}else{
				if(j<prob[1]){
					j=i+N;dat[j]=dat[i];dat[i]=0;adat[i]=0;perm[k]=j;
				}else{
					if(j<prob[2]){
						j=left(i);dat[j]=dat[i];dat[i]=0;adat[i]=0;perm[k]=j;
					}else{
						j=i-N;dat[j]=dat[i];dat[i]=0;adat[i]=0;perm[k]=j;
					}
				}
			}
		}
	}
	function Step()
	{var i=0,t=0.75*dt,delta=0,t0=(new Date()).getTime(),t1;
		while(t>delta){
			_step1();
			t1=(new Date()).getTime();
			delta=t1-t0;
			i++;
			//document.getElementById("echo").innerHTML=i+"/"+t+"/"+t1;
		}
		document.getElementById("echo").innerHTML=Math.round(i*1000/delta)+"ips, dt="+dt+"ms  n="+(perm.length);
		if(i<2){dt*=2;}else{if(i>100 && dt>200){dt/=2;}}
		/*for(i=0;i<10;i++){_step1();}
		t1=(new Date()).getTime();
		document.getElementById("echo").innerHTML=t1+"-"+t0+"="+(t1-t0)+" ms";*/
		fl_upd=true;
		OnPaint();
	}
	function OnRBOut(v)
	{var i;
		for(i=0;i<2;i++){
			document.getElementById("rb_"+i).checked=false;
		}
		document.getElementById("rb_"+v).checked=true;
		if(out_mode!=v){
			out_mode=v;
			fl_upd=true;
			OnPaint();
		}
	}
	function OnApplyButton()
	{
		Reset(document.getElementById("ed_res").value);
		fl_upd=true; OnPaint();
	}
	function OnClrButton()
	{var i;
		for(i=0;i<dat.size;i++){ if(dat[i]!=1){dat[i]=0;} adat[i]=0; }
		perm.length=0;
		fl_upd=true; OnPaint();
	}
	function OnFillButton()
	{var i,p0,p1;
		p0=parseFloat(document.getElementById("ed_den").value);
		p1=parseFloat(document.getElementById("ed_frr").value);
		if(p0==NaN || p0<0){p0=0;} if(p0>1){p0=1;}
		if(p1==NaN || p1<0){p1=0;} if(p1>1){p1=1;}
		document.getElementById("ed_den").value=p0;
		document.getElementById("ed_frr").value=p1;
		for(i=0;i<dat.size;i++){ 
			if(dat[i]!=1){
				if(Math.random()<p0){
					if(Math.random()<p1){dat[i]=7;}else{dat[i]=3;}
				}else{
					dat[i]=0;
				}
			} 
			adat[i]=0; 
		}
		perm.length=0;
		for(i=0;i<dat.size;i++){
			if(dat[i]==3 || dat[i]==7){perm.push(i);}
		}
		fl_upd=true; OnPaint();
	}
  
  //OnInit();
  gadgets.util.registerOnLoadHandler(OnInit);
	-->
	</SCRIPT>


<input type="button" id="startbtn" value="start" onclick="OnStartButton()"/>
<input type="button" id="settbtn" value="settings >" onclick="OnSettingsButton()"/>
<input type="button" id="infobtn" value="info >" onclick="OnInfoButton()"/>
<br/>
<div id="settdiv" class="sett" style="display: none">
	<b>width:</b>
	<input type="edit" class="myint" id="ed_res"/><input type="button" id="btn_apply" value="apply" onclick="OnApplyButton()"/>
	<br/>
	<b>output:</b>
	<input type="radio" id="rb_0" onclick="OnRBOut(0)">text</input>
	<input type="radio" id="rb_1" onclick="OnRBOut(1)">graph</input>
	<br/>
	<b>content:</b>
	<table style="padding-left:10px;">
		<tr>
			<td>density</td> 
			<td><input type="edit" class="myreal" id="ed_den"/></td> 
			<td><input type="button" id="btn_clr" value="clear" onclick="OnClrButton()"/></td>
		</tr>
		<tr>
			<td>fract. of right-movers</td>
			<td><input type="edit" class="myreal" id="ed_frr"/></td>
			<td><input type="button" id="btn_fill" value="fill" onclick="OnFillButton()"/></td>
		</tr>
	</table>
	<b>parameters:</b>
	w_f= <input type="edit" class="myint" id="ed_wf"/> &nbsp;
	w_i= <input type="edit" class="myint" id="ed_wi"/> &nbsp;
	t_i= <input type="edit" class="myint" id="ed_ti"/>
</div>
<div id="infodiv" class="info" style="display: none">
<p>A very simple time- and space-discrete model of pedestrian/particles flows. Each pedestrian has an intention to follow the prespecified direction; the 'strength' of this intention is controlled via the 'follow weight' <b>w_f</b>. In case it is not possible to move in the desired direction, the pedestrian may either wait at the current position or try to avoid an obstacle by moving up or down (relative to the screen). The intention of moving instead of waiting is controlled via the 'impatience weight' <b>w_i</b>. 'Impatience threshold' <b>t_i</b> controls when impatience comes into play: high values mean that a possibility of deviating is always considered, value of 0 means that deviation will never happen - if there is no possibility of following the predefined direction, the pedestrian will just wait. There are two types of pedestrians depending on their prespecified direction of movement: left and right.</p>

<p>The scene represents a corridor bounded at the top and bottom, with periodic boundary conditions at the left and right sides. The width of the corridor can be reset via the corresponding parameter, the height is always a half of the width.</p>

<p>The line just below the scene displays some performance information: the number of iterations per second (<b>ips</b>), the scene update interval (<b>dt</b>, how frequently the scene is redrawn) and the number of pedestrians <b>n</b>. The computational complexity of one iteration is O(n).</p> 

<p>The feature of the model is that (unlike many similar models) it does not use the dynamic floor field: the dynamics is governed only by interactions between adjacent pedestrians. It is not based on the notions of 'trails' or 'attraction' between those having the same goal (following the same direction). That is why the phenomenon of lane formation is somewhat weaker and the lanes are unstable. Further, the model uses only integer arithmetics (unlike the current JS implementation, because of the built-in Math.random() function returning real values).</p>

<p>DKrush, April 2014</p>
</div>
<br/>
<!--<div id="paintdiv0" style="display: block; width: 200px; height: 200px"></div>
<div id="paintdiv1" style="display: block; width: 400px; height: 200px"></div>-->
<div id="paintdiv0" style="display: block; width: 201px; font-family:'Courier New', Courier, monospace; font-size:5px; line-height:60%"></div>
<div id="echo">echo</div>
<br/>
<div id="paintdiv1" style="display: block;"></div>
	
	]]>  
  </Content>
</Module>